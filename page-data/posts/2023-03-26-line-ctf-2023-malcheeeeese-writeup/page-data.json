{
    "componentChunkName": "component---src-templates-md-blog-post-js",
    "path": "/posts/2023-03-26-line-ctf-2023-malcheeeeese-writeup",
    "result": {"data":{"markdownRemark":{"html":"<p>I played LINE CTF 2023 with Water Paddler and we got 2nd place. I worked on the crypto challenges and solved Malcheeeeese but failed on Flag Leak Incident ðŸ¥²</p>\n<h1>Malcheeeeese</h1>\n<blockquote>\n<p>Please break through the authentication and get the flag.</p>\n<p><code>nc 34.85.9.81 13000</code></p>\n</blockquote>\n<p><code>challenge_server.py</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> server <span class=\"token keyword\">import</span> decrypt<span class=\"token punctuation\">,</span> generate_new_auth_token\n<span class=\"token keyword\">import</span> socket<span class=\"token punctuation\">,</span> signal<span class=\"token punctuation\">,</span> json<span class=\"token punctuation\">,</span> threading\n<span class=\"token keyword\">from</span> socketserver <span class=\"token keyword\">import</span> BaseRequestHandler<span class=\"token punctuation\">,</span> TCPServer<span class=\"token punctuation\">,</span> ForkingMixIn\n\n\naddress <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11223</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ChallengeHandler</span><span class=\"token punctuation\">(</span>BaseRequestHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">challenge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> verifier<span class=\"token punctuation\">,</span> verify_counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        authtoken <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        ret <span class=\"token operator\">=</span> decrypt<span class=\"token punctuation\">(</span>authtoken<span class=\"token punctuation\">,</span> verifier<span class=\"token punctuation\">,</span> verify_counter<span class=\"token punctuation\">)</span>\n        req<span class=\"token punctuation\">.</span>sendall<span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">b'\\n'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        signal<span class=\"token punctuation\">.</span>alarm<span class=\"token punctuation\">(</span><span class=\"token number\">1500</span><span class=\"token punctuation\">)</span>\n        req <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>request\n        req<span class=\"token punctuation\">.</span>settimeout<span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n\n        new_auth_token<span class=\"token punctuation\">,</span> verifier <span class=\"token operator\">=</span> generate_new_auth_token<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        req<span class=\"token punctuation\">.</span>sendall<span class=\"token punctuation\">(</span><span class=\"token string\">b\"Leaked Token:\"</span><span class=\"token operator\">+</span>new_auth_token<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">b\"\\n\"</span><span class=\"token punctuation\">)</span>\n        verify_counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>challenge<span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> verifier<span class=\"token punctuation\">,</span> verify_counter<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span> socket<span class=\"token punctuation\">.</span>timeout <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                req<span class=\"token punctuation\">.</span>sendall<span class=\"token punctuation\">(</span><span class=\"token string\">b\"Timeout. Bye.\\n\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span>\n            <span class=\"token keyword\">except</span> socket<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span>\n            <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span>\n            <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> verify_counter <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n                    verify_counter<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ChallengeServer</span><span class=\"token punctuation\">(</span>ForkingMixIn<span class=\"token punctuation\">,</span> TCPServer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    request_queue_size <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n\n    <span class=\"token comment\"># For address reassignment on reboot</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">server_bind</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">.</span>setsockopt<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>SOL_SOCKET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SO_REUSEADDR<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>server_address<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    TCPServer<span class=\"token punctuation\">.</span>allow_reuse_address <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    server <span class=\"token operator\">=</span> ChallengeServer<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">,</span> ChallengeHandler<span class=\"token punctuation\">)</span>\n    server<span class=\"token punctuation\">.</span>serve_forever<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">with</span> server<span class=\"token punctuation\">:</span>\n        server_thread <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>server<span class=\"token punctuation\">.</span>serve_forever<span class=\"token punctuation\">)</span>\n        server_thread<span class=\"token punctuation\">.</span>setDaemon<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        server_thread<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">pass</span></code></pre></div>\n<p><code>server.py</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token comment\">#!/usr/bin/env python3</span>\n\n<span class=\"token comment\"># crypto + misc challenge</span>\n\n<span class=\"token comment\"># See generate_new_auth_token() in this file and client.py for details on the authentication token.</span>\n\n<span class=\"token keyword\">import</span> sys<span class=\"token punctuation\">,</span> os\nsys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'./secret/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> server_secret <span class=\"token keyword\">import</span> FLAG\n<span class=\"token keyword\">from</span> common_secret <span class=\"token keyword\">import</span> AES_KEY_HEX<span class=\"token punctuation\">,</span> TOKEN_HEX<span class=\"token punctuation\">,</span> PASSWORD_HEX\n\n<span class=\"token keyword\">import</span> base64\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>PublicKey <span class=\"token keyword\">import</span> ECC\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Signature <span class=\"token keyword\">import</span> eddsa\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Random <span class=\"token keyword\">import</span> get_random_bytes\n\nENCRYPTED_PAYLOAD_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">136</span>\nPREVIOUS_ENCRYPTED_PWD <span class=\"token operator\">=</span> <span class=\"token string\">\"72e124ff792af7bc2c077a0260ba3c4a\"</span>\nAES_IV_HEX <span class=\"token operator\">=</span> <span class=\"token string\">\"04ab09f1b64fbf70\"</span>\nprevious_aes_iv <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>fromhex<span class=\"token punctuation\">(</span>AES_IV_HEX<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># load secrets</span>\naes_key <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>fromhex<span class=\"token punctuation\">(</span>AES_KEY_HEX<span class=\"token punctuation\">)</span>\nprevious_password <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>fromhex<span class=\"token punctuation\">(</span>PASSWORD_HEX<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># for authentication</span>\nprevious_iv_b64 <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>previous_aes_iv<span class=\"token punctuation\">)</span>\n\nreplay_attack_filter_for_iv <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>previous_iv_b64<span class=\"token punctuation\">]</span>\nreplay_attack_filter_for_sig <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nacceptable_token <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># cf. previous token ( TOKEN_HEX ) was removed</span>\nacceptable_password <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">b\"cheeeeese\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># cf. previous password ( PASSWORD_HEX ) was removed</span>\n\n\n<span class=\"token comment\"># Generate new token per request</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># - new authentication token</span>\n<span class=\"token comment\"># - verifier for EdDSA</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">generate_new_auth_token</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># re-generate token+signature part</span>\n    <span class=\"token comment\"># Generate authentication token ; base64enc( iv for AES ) || AES-256-CTR-Enc( base64enc(password || token || signature), key for AES, iv for AES )</span>\n    <span class=\"token comment\"># Not changed : key for AES, iv for AES, password(PASSWORD_HEX)</span>\n    <span class=\"token comment\"># Change : token, signature</span>\n\n    token <span class=\"token operator\">=</span> get_random_bytes<span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 1. Generate Signature for token over Ed25519 ( RFC8032 ) </span>\n    sign_key_pair <span class=\"token operator\">=</span> ECC<span class=\"token punctuation\">.</span>generate<span class=\"token punctuation\">(</span>curve<span class=\"token operator\">=</span><span class=\"token string\">'Ed25519'</span><span class=\"token punctuation\">)</span>\n    signer <span class=\"token operator\">=</span> eddsa<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span>sign_key_pair<span class=\"token punctuation\">,</span> mode<span class=\"token operator\">=</span><span class=\"token string\">'rfc8032'</span><span class=\"token punctuation\">)</span>\n    signature <span class=\"token operator\">=</span> signer<span class=\"token punctuation\">.</span>sign<span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 2. Encrypt password, token and signature with AES-256-CTR-Enc( base64enc(password || token || signature), key for AES, iv for AES )</span>\n    payload <span class=\"token operator\">=</span>  base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>previous_password<span class=\"token operator\">+</span>token<span class=\"token operator\">+</span>signature<span class=\"token punctuation\">)</span>\n    cipher <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span>aes_key<span class=\"token punctuation\">,</span> mode<span class=\"token operator\">=</span>AES<span class=\"token punctuation\">.</span>MODE_CTR<span class=\"token punctuation\">,</span> nonce<span class=\"token operator\">=</span>previous_aes_iv<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 3. Generate authentication token ; base64enc( iv for AES) || AES-256-CTR-Enc( base64enc(password || token || signature), key for AES, iv for AES )</span>\n    encrypted_payload <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>previous_aes_iv<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> cipher<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span> \n    \n    <span class=\"token comment\"># add token and signature to filter</span>\n    acceptable_token<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span>\n    replay_attack_filter_for_sig<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>token<span class=\"token operator\">+</span>signature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># prepare verifier for EdDSA</span>\n    verifier <span class=\"token operator\">=</span> eddsa<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span>sign_key_pair<span class=\"token punctuation\">.</span>public_key<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mode<span class=\"token operator\">=</span><span class=\"token string\">'rfc8032'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> encrypted_payload<span class=\"token punctuation\">,</span> verifier\n\n\n<span class=\"token comment\"># Input : b64password : base64 encoded password</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># - Is password verification successful? ( True / False )</span>\n<span class=\"token comment\"># - raw passowrd length</span>\n<span class=\"token comment\"># - Error Code ( 0, 1, 2 )</span>\n<span class=\"token comment\"># - Error Message</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">verify_password</span><span class=\"token punctuation\">(</span>b64password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        password <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>b64password<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Base64 decoding error\"</span>\n\n    <span class=\"token keyword\">if</span> password <span class=\"token keyword\">in</span> acceptable_password<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Your password is correct!\"</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Your password is incorrect.\"</span>\n\n<span class=\"token comment\"># Input : b64token_signature : base64 encoded token+signature, verifier, verify_counter</span>\n<span class=\"token comment\"># Output:</span>\n<span class=\"token comment\"># - Is signature verification successful? ( True / False )</span>\n<span class=\"token comment\"># - Error Code ( 0, 1, 2, 3, 4 )</span>\n<span class=\"token comment\"># - Error Message</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">verify_signature</span><span class=\"token punctuation\">(</span>b64token_signature<span class=\"token punctuation\">,</span> verifier<span class=\"token punctuation\">,</span> verify_counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    b64token <span class=\"token operator\">=</span> b64token_signature<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\n    b64signature <span class=\"token operator\">=</span> b64token_signature<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">if</span> verify_counter <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Err1-Verification limit Error\"</span>\n\n    <span class=\"token keyword\">if</span> b64signature <span class=\"token keyword\">in</span> replay_attack_filter_for_sig<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Err2-Deactived Token\"</span>\n    \n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        token <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>b64token<span class=\"token punctuation\">)</span>\n        signature <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>b64signature<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Err3-Base64 decoding error\"</span>\n    \n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        verifier<span class=\"token punctuation\">.</span>verify<span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> token <span class=\"token keyword\">in</span> acceptable_token<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"verification is successful\"</span>\n    <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Err4-verification is failed\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>hex_ciphertext<span class=\"token punctuation\">,</span> verifier<span class=\"token punctuation\">,</span> verify_counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    flag <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n\n    <span class=\"token comment\"># Length check</span>\n    ciphertext <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>fromhex<span class=\"token punctuation\">(</span>hex_ciphertext<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>ENCRYPTED_PAYLOAD_SIZE<span class=\"token punctuation\">:</span>\n        ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"is_iv_verified\"</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"is_pwd_verified\"</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"pwd_len\"</span> <span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"pwd_error_number\"</span> <span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"pwd_error_reason\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"is_sig_verified\"</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"sig_error_number\"</span> <span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"sig_verification_reason\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"authentication token size MUST be 136 bytes\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"flag\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ret\n    \n    iv_b64 <span class=\"token operator\">=</span> ciphertext<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span>\n    ciphertext <span class=\"token operator\">=</span> ciphertext<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># iv reuse detection</span>\n    <span class=\"token keyword\">if</span> iv_b64 <span class=\"token keyword\">in</span> replay_attack_filter_for_iv<span class=\"token punctuation\">:</span>\n        ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"is_iv_verified\"</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"is_pwd_verified\"</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"pwd_len\"</span> <span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"pwd_error_number\"</span> <span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"pwd_error_reason\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"is_sig_verified\"</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"sig_error_number\"</span> <span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"sig_verification_reason\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"iv reuse detected\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"flag\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ret\n    \n\n    cipher <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>aes_key<span class=\"token punctuation\">,</span> AES<span class=\"token punctuation\">.</span>MODE_CTR<span class=\"token punctuation\">,</span> nonce<span class=\"token operator\">=</span>base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>iv_b64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    pt_b64 <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># password authentication</span>\n    is_pwd_verified<span class=\"token punctuation\">,</span> pwd_len<span class=\"token punctuation\">,</span> pwd_error_number<span class=\"token punctuation\">,</span> pwd_error_reason <span class=\"token operator\">=</span> verify_password<span class=\"token punctuation\">(</span>pt_b64<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># authentication using EdDSA</span>\n    is_sig_verified<span class=\"token punctuation\">,</span> sig_error_number<span class=\"token punctuation\">,</span> sig_error_reason <span class=\"token operator\">=</span> verify_signature<span class=\"token punctuation\">(</span>pt_b64<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> verifier<span class=\"token punctuation\">,</span> verify_counter<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token boolean\">True</span><span class=\"token operator\">==</span>is_pwd_verified <span class=\"token keyword\">and</span> <span class=\"token boolean\">True</span><span class=\"token operator\">==</span>is_sig_verified<span class=\"token punctuation\">:</span>\n        flag <span class=\"token operator\">=</span> FLAG\n    \n    ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"is_iv_verified\"</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"is_pwd_verified\"</span> <span class=\"token punctuation\">:</span> is_pwd_verified<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"pwd_len\"</span> <span class=\"token punctuation\">:</span> pwd_len<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"pwd_error_number\"</span> <span class=\"token punctuation\">:</span> pwd_error_number<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"pwd_error_reason\"</span><span class=\"token punctuation\">:</span> pwd_error_reason<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"is_sig_verified\"</span> <span class=\"token punctuation\">:</span> is_sig_verified<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"sig_error_number\"</span> <span class=\"token punctuation\">:</span> sig_error_number<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"sig_error_reason\"</span><span class=\"token punctuation\">:</span> sig_error_reason<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"flag\"</span> <span class=\"token punctuation\">:</span> flag\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> ret</code></pre></div>\n<p><code>client.py</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token comment\">#!/usr/bin/env python3</span>\n<span class=\"token comment\"># crypto + misc challenge</span>\n\n<span class=\"token comment\"># How to generate the authentication token</span>\n<span class=\"token comment\"># Given as secret; key for AES, sign_key_pair for EdDSA ( sign_key, verify_key ), token, password</span>\n<span class=\"token comment\"># key for AES, token, password were pre-shared to server.</span>\n<span class=\"token comment\"># 1. Generate Signature for token over Ed25519 ( RFC8032 ) </span>\n<span class=\"token comment\"># 2. Encrypt password, token and signature with AES-256-CTR-Enc( base64enc(password || token || signature), key for AES, iv for AES )</span>\n<span class=\"token comment\"># 3. Generate authentication token ; base64enc( iv for AES) || AES-256-CTR-Enc( base64enc(password || token || signature), key for AES, iv for AES )</span>\n<span class=\"token comment\"># - password : 12 bytes, random bit-string</span>\n<span class=\"token comment\"># - token : 15 bytes, random bit-string</span>\n<span class=\"token comment\"># - signature : 64 bytes, Ed25519 signature ( RFC8032 )</span>\n<span class=\"token comment\"># - key for AES : 32 bytes, random bit-string</span>\n<span class=\"token comment\"># - iv for AES : 8 bytes, random bit-string</span>\n<span class=\"token comment\"># - payload = base64enc(password || token || signature) : 124 bytes</span>\n<span class=\"token comment\"># - authentication_token ( encrypted_payload ) = base64enc(iv) || AES-256-CTR-Enc ( payload ) : 136 bytes</span>\n\n<span class=\"token keyword\">import</span> sys<span class=\"token punctuation\">,</span> os\nsys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'./secret/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> client_secret <span class=\"token keyword\">import</span> SIGN_KEY_PAIR_HEX\n<span class=\"token keyword\">from</span> common_secret <span class=\"token keyword\">import</span> AES_KEY_HEX<span class=\"token punctuation\">,</span> TOKEN_HEX<span class=\"token punctuation\">,</span> PASSWORD_HEX\n\n<span class=\"token keyword\">import</span> base64\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>PublicKey <span class=\"token keyword\">import</span> ECC\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Signature <span class=\"token keyword\">import</span> eddsa\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES\n\nAES_IV_HEX <span class=\"token operator\">=</span> <span class=\"token string\">\"04ab09f1b64fbf70\"</span>\naes_iv <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>fromhex<span class=\"token punctuation\">(</span>AES_IV_HEX<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># load secrets</span>\naes_key <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>fromhex<span class=\"token punctuation\">(</span>AES_KEY_HEX<span class=\"token punctuation\">)</span>\npassword <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>fromhex<span class=\"token punctuation\">(</span>PASSWORD_HEX<span class=\"token punctuation\">)</span>\ntoken <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>fromhex<span class=\"token punctuation\">(</span>TOKEN_HEX<span class=\"token punctuation\">)</span>\nsign_key_pair <span class=\"token operator\">=</span> ECC<span class=\"token punctuation\">.</span>import_key<span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>fromhex<span class=\"token punctuation\">(</span>SIGN_KEY_PAIR_HEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'ascii'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 1. Generate Signature for token over Ed25519 ( RFC8032 ) </span>\nsigner <span class=\"token operator\">=</span> eddsa<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span>sign_key_pair<span class=\"token punctuation\">,</span> mode<span class=\"token operator\">=</span><span class=\"token string\">'rfc8032'</span><span class=\"token punctuation\">)</span>\nsignature <span class=\"token operator\">=</span> signer<span class=\"token punctuation\">.</span>sign<span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 2. Encrypt password, token and signature with AES-256-CTR-Enc( base64enc(password || token || signature), key for AES, iv for AES )</span>\npayload <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>password<span class=\"token operator\">+</span>token<span class=\"token operator\">+</span>signature<span class=\"token punctuation\">)</span>\ncipher <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span>aes_key<span class=\"token punctuation\">,</span> mode<span class=\"token operator\">=</span>AES<span class=\"token punctuation\">.</span>MODE_CTR<span class=\"token punctuation\">,</span> nonce<span class=\"token operator\">=</span>aes_iv<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 3. Generate authentication token ; base64enc( iv for AES) || AES-256-CTR-Enc( base64enc(password || token || signature), key for AES, iv for AES )</span>\nencrypted_pwd_token_sig <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span> \n\nencrypted_payload <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>aes_iv<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> encrypted_pwd_token_sig\n\n<span class=\"token comment\"># user used PREVIOUS_AUTHN_TOKEN_HEX as authentication token</span>\n<span class=\"token comment\"># print(\"PREVIOUS_AUTHN_TOKEN_HEX\", encrypted_payload.hex())</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PREVIOUS_ENCRYPTED_PWD_HEX\"</span><span class=\"token punctuation\">,</span> encrypted_pwd_token_sig<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1>Solution</h1>\n<p>The aim of this challenge is to break an authentication protocol based on AES-CTR and Ed25519. To get the flag, we must provide an auth token (i.e. an AES-CTR iv/ciphertext) which decrypts to a controlled password and contains the target token along with a valid signature. Upon connection, the server leaks such a valid auth token (though with a different password), but has some measures in place to prevent simple replay attacks.</p>\n<p>Here are some useful facts about the challenge that we can gather from the handout files:</p>\n<ul>\n<li>The AES key and IV used to generate the auth token are fixed (across connections)</li>\n<li>The previous password is also fixed</li>\n<li>The Ed25519 key is regenerated per connection</li>\n<li>The auth token payload size is 136, and is of the form <code>AES_IV (12) || PW_TOKEN_SIG_B64_ENC (124)</code>\n<ul>\n<li>Furthermore, <code>PW_TOKEN_SIG_B64_ENC</code> is the AES-CTR ciphertext of the base64 encoding of the password, token, and signature: <code>PW_B64 (16) || TOKEN_B64 (20) || SIG_B64 (88)</code></li>\n</ul>\n</li>\n<li>We are only able to verify the token twice per connection</li>\n</ul>\n<p>In terms of the security measures implemented by the protocol, CTR mode nonce reuse is prevented by ensuring the provided IV is not in the list of used IVs, and signature replay attacks are also prevented in a similar way. The implementation of these are both flawed as they use the base64 encoding of the IV and signature to check for reuse which can be exploited as we'll see soon.</p>\n<h2>Recovering the Keystream (Password)</h2>\n<p>To be able to forge a ciphertext for an arbitrary password, we need to either recover the old password or the keystream for the first 16 bytes more generally. By keystream, we mean the AES-CTR keystream produced by the fixed key and IV pair in the challenge. To be able to hit the verify functions with this IV, we need a way to bypass the IV reuse detection check. The check is performed on the base64 encoding of the IV, which is vulnerable due to <a href=\"https://stackoverflow.com/questions/53225750/is-it-possible-to-get-collisions-with-base64-encoding-decoding\"><em>base64 collisions</em></a>, but we didn't use this for this part of the challenge.</p>\n<p>The fixed IV is <code>BKsJ8bZPv3A=</code> in base64, and <code>04ab09f1b64fbf70</code> in hex. By changing the padding byte to an <code>A</code>, we get the base64 string <code>BKsJ8bZPv3AA</code> which is <code>04ab09f1b64fbf7000</code> in hex (there is a trailing null byte). Using this as the IV will pass the IV reuse detection check, but it will essentially result in the nonce reuse situation, since the <a href=\"https://github.com/Legrandin/pycryptodome/blob/b3c136287a1a079081d61ff977f791988a805daa/lib/Crypto/Cipher/_mode_ctr.py#L349\">initial counter block is simply set to <code>nonce || 00..00</code></a> anyway.</p>\n<p>With the IV being reused, we can start looking towards the <code>verify_password</code> function, which provides us with errors depending on the validity of the base64 string that the ciphertext decrypts to. Similarly to padding oracle attacks, an oracle that gives different responses based on the decrypted ciphertext can help a lot in recovering the keystream. In this case, the server will respond with whether or not the decrypted ciphertext is valid base64, and if it is, it will tell us the length of the decoded value.</p>\n<blockquote>\n<p>Side note on base64 padding: All valid base64 strings must be multiples of 4, and this is achieved through padding with the padding character <code>=</code>. A string consisting of <code>n</code> base64 characters where <code>n</code> is 1 more than a multiple of 4 is not valid (you can't just add three padding characters). This means valid base64 strings will only have either one or two trailing padding characters. However, in Python an arbitrary number of padding characters can be used as long as it is enough.</p>\n</blockquote>\n<p>Since we are reusing the IV, the keystream is the same. So if we simply sent the same ciphertext for the first 16 bytes, the decrypted result should be valid base64 corresponding to the base64 encoding of the old password. For simplicity, let's assume (this also happens to be the case actually) that the previous password's base64 encoding is 16 full bytes of base64 data characters (i.e. it doesn't end in padding). If we modify the last byte, there will be some corresponding change in the decrypted value at the last byte. More specifically, the bytes will satisfy <code>ct_byte ^ keystream_byte == decrypted_byte</code>. There are three things that can happen which correspond to different responses from the oracle:</p>\n<ol>\n<li><code>decrypted_byte</code> is a valid base64 character: In this case, base64 decoding will succeed and result in a password of the same length (12)</li>\n<li><code>decrypted_byte</code> is not a valid base64 character: In this case, base64 decoding will fail as the padding will be incorrect</li>\n<li><code>decrypted_byte</code> is the padding character <code>=</code>: In this case, base64 decoding will succeed and result in a password of length one less (11)</li>\n</ol>\n<p>Clearly, this gives us a direct way of recovering this last keystream byte. We simply try all 256 possible values for <code>ct_byte</code> and when the oracle tells us that the length is one less, we know that <code>ct_byte ^ keystream_byte == ord('=')</code> and so <code>keystream_byte = ord('=') ^ ct_byte</code>.</p>\n<p>If we now set the last byte such that the decrypted value will be the padding character <code>=</code>, we have the exact same situation when modifying the 15th ciphertext byte. This will lead to recovery of the 15th keystream byte as well.</p>\n<p>For the 14th byte, if we set the 15th and 16th bytes such that their decrypted values will be the padding character <code>=</code>, something slightly different happens. The number of base64 data characters will be 14 and with two leading padding characters, this is valid base64. However, if we modify the 14th ciphertext byte, there are two things that can happen:</p>\n<ol>\n<li><code>decrypted_byte</code> is a valid base64 character: In this case, base64 decoding will succeed</li>\n<li><code>decrypted_byte</code> is not a valid base64 character: In this case, base64 decoding will fail</li>\n</ol>\n<p>Gathering these results across the 256 possible values of <code>ct_byte</code> is sufficient to uniquely recover <code>keystream_byte</code>. Specifically, with these results we know that <code>(ct_byte ^ keystream_byte) not in { valid_base64_charset }</code> if the oracle returns an error, and <code>(ct_byte ^ keystream_byte) in { valid_base64_charset }</code> if it doesn't. We can build a mapping from length 256 bitstrings to <code>keystream_byte</code> values where the bitstring contains a <code>1</code> if a <code>ct_byte</code> value corresponding to that position results in a valid base64 character, and <code>0</code> otherwise:</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">BITSTRING_MAPPING <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    v <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">for</span> ct <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> key<span class=\"token operator\">^</span>ct <span class=\"token keyword\">in</span> b64_vals<span class=\"token punctuation\">:</span>\n            v <span class=\"token operator\">+=</span> <span class=\"token string\">'1'</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            v <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span>\n    <span class=\"token keyword\">assert</span> v <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> BITSTRING_MAPPING\n    BITSTRING_MAPPING<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> key</code></pre></div>\n<p>Using this, it is possible to recover the rest of the keystream for the first 16 bytes. We can then forge a valid ciphertext for the target password by XORing the keystream with the target password base64 encoded.</p>\n<h2>Forging a Signature</h2>\n<p>Producing a valid ciphertext for the target password is just the first part of the auth token verification. We still need to provide a valid Ed25519 signature for the corresponding random token. If there was no signature replay attack mitigation in place, we could simply send the token/signature part from the leaked auth token. It turns out that it's possible to bypass this mitigation however, so we don't need to break Ed25519 or exploit any malleability issues in Ed25519 itself.</p>\n<p>The key to solving this part is <a href=\"https://stackoverflow.com/questions/53225750/is-it-possible-to-get-collisions-with-base64-encoding-decoding\"><em>base64 collisions</em></a>. Essentially, there is an interesting behaviour of base64 decoding which results in two different base64 strings decoding to the same values:</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> base64 <span class=\"token keyword\">import</span> b64decode\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> b64decode<span class=\"token punctuation\">(</span><span class=\"token string\">b'AA=='</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">b'\\x00'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> b64decode<span class=\"token punctuation\">(</span><span class=\"token string\">b'AB=='</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">b'\\x00'</span></code></pre></div>\n<p>Since the signature replay attack mitigation is implemented via a string comparison on the base64 encodings, we can simply use this behaviour to obtain a \"different\" signature which will actually be the same signature once decoded.</p>\n<p>Note that the signature will always end with two padding characters (because the raw signature is 64 bytes). So without even recovering the keystream for the token and signature, we can simply set the 3rd last byte of the token to a random value and hope that gives us the flag. We just need this to result in the decrypted value at the 3rd last byte to be <em>slightly</em> different to the original value, and in practice this happens without too many attempts.</p>\n<h2>Solve Script</h2>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> random <span class=\"token keyword\">import</span> randint\n<span class=\"token keyword\">from</span> tqdm <span class=\"token keyword\">import</span> tqdm\n<span class=\"token keyword\">from</span> base64 <span class=\"token keyword\">import</span> b64encode<span class=\"token punctuation\">,</span> b64decode\n<span class=\"token keyword\">import</span> json\n\n<span class=\"token keyword\">from</span> string <span class=\"token keyword\">import</span> ascii_letters<span class=\"token punctuation\">,</span> digits\nb64a <span class=\"token operator\">=</span> ascii_letters <span class=\"token operator\">+</span> digits <span class=\"token operator\">+</span> <span class=\"token string\">'+/'</span>\nb64_vals <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>b64a<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nBITSTRING_MAPPING <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nflip <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    v <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">for</span> ct <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> key<span class=\"token operator\">^</span>ct <span class=\"token keyword\">in</span> b64_vals<span class=\"token punctuation\">:</span>\n            v <span class=\"token operator\">+=</span> <span class=\"token string\">'1'</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            v <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span>\n    <span class=\"token keyword\">assert</span> v <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> BITSTRING_MAPPING\n    BITSTRING_MAPPING<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> key\n    BITSTRING_MAPPING<span class=\"token punctuation\">[</span>flip<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> key\n\nPREVIOUS_ENCRYPTED_PWD <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>fromhex<span class=\"token punctuation\">(</span><span class=\"token string\">'72e124ff792af7bc2c077a0260ba3c4a'</span><span class=\"token punctuation\">)</span>\nDUPED_IV_B64 <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>fromhex<span class=\"token punctuation\">(</span><span class=\"token string\">'424b734a38625a5076334141'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Oracle</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>conn <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'34.85.9.81'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13000</span><span class=\"token punctuation\">,</span> level<span class=\"token operator\">=</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        token <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>fromhex<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>conn<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> token\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>conn<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>conn<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>conn<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nfirst16_keystream <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\ncurr_enc_pw <span class=\"token operator\">=</span> PREVIOUS_ENCRYPTED_PWD\n<span class=\"token keyword\">for</span> pos <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    bitmapping <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    pos_vals <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finding val for pos'</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> tqdm<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        oracle <span class=\"token operator\">=</span> Oracle<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        token <span class=\"token operator\">=</span> oracle<span class=\"token punctuation\">.</span>retrieve<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        enc_pw <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>curr_enc_pw<span class=\"token punctuation\">)</span>\n        enc_pw<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i\n        test_token <span class=\"token operator\">=</span> DUPED_IV_B64 <span class=\"token operator\">+</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>enc_pw<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token operator\">+</span><span class=\"token number\">16</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n        res <span class=\"token operator\">=</span> oracle<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>test_token<span class=\"token punctuation\">)</span>\n        oracle<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        pos_vals<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span><span class=\"token string\">'pwd_len'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    B <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>pos_vals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> b <span class=\"token keyword\">in</span> B<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> pos_vals<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                val <span class=\"token operator\">=</span> pos_vals<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">61</span>\n                first16_keystream<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n                curr_enc_pw <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>curr_enc_pw<span class=\"token punctuation\">)</span>\n                curr_enc_pw<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val <span class=\"token operator\">^</span> <span class=\"token number\">61</span>\n                curr_enc_pw <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>curr_enc_pw<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'good 1'</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">,</span> first16_keystream<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        b0<span class=\"token punctuation\">,</span> b1 <span class=\"token operator\">=</span> B\n        <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> pos_vals<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> v <span class=\"token operator\">==</span> b0<span class=\"token punctuation\">:</span>\n                bitmapping <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span>\n            <span class=\"token keyword\">elif</span> v <span class=\"token operator\">==</span> b1<span class=\"token punctuation\">:</span>\n                bitmapping <span class=\"token operator\">+=</span> <span class=\"token string\">'1'</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> bitmapping<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> bitmapping <span class=\"token keyword\">in</span> BITSTRING_MAPPING<span class=\"token punctuation\">:</span>\n            val <span class=\"token operator\">=</span> BITSTRING_MAPPING<span class=\"token punctuation\">[</span>bitmapping<span class=\"token punctuation\">]</span>\n            first16_keystream<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n            curr_enc_pw <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>curr_enc_pw<span class=\"token punctuation\">)</span>\n            curr_enc_pw<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val <span class=\"token operator\">^</span> <span class=\"token number\">61</span>\n            curr_enc_pw <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>curr_enc_pw<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'good'</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">,</span> first16_keystream<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bad'</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span>\n\nb64_pw <span class=\"token operator\">=</span> b64encode<span class=\"token punctuation\">(</span><span class=\"token string\">b'cheeeeese'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">b'===='</span>\nenc_pw <span class=\"token operator\">=</span> xor<span class=\"token punctuation\">(</span>first16_keystream<span class=\"token punctuation\">,</span> b64_pw<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    oracle <span class=\"token operator\">=</span> Oracle<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    token <span class=\"token operator\">=</span> oracle<span class=\"token punctuation\">.</span>retrieve<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    test_token <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>DUPED_IV_B64 <span class=\"token operator\">+</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>enc_pw<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token operator\">+</span><span class=\"token number\">16</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    test_token<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n    res <span class=\"token operator\">=</span> oracle<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>test_token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> res<span class=\"token punctuation\">[</span><span class=\"token string\">'flag'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span><span class=\"token string\">'flag'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n    oracle<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ time python3 solv.py\nfinding val for pos 1\n100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 256/256 [00:02&lt;00:00, 99.85it/s]\ngood 1 1 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28]\nfinding val for pos 2\n100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 256/256 [00:02&lt;00:00, 99.83it/s]\ngood 1 2 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 28]\nfinding val for pos 3\n100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 256/256 [00:02&lt;00:00, 99.58it/s]\n3 1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100100000000000000000000001001111001000000000000000000000010011111111111111111111111111111111111111111111101110110000000011001111\ngood 3 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 194, 83, 28]\nfinding val for pos 4\n100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 256/256 [00:02&lt;00:00, 99.50it/s]\n4 1111111100000111111111101111111111111111000001111111111011111111000000000000000000000000000000001111111100000011000000001000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\ngood 4 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 194, 83, 28]\nfinding val for pos 5\n100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 256/256 [00:02&lt;00:00, 98.90it/s]\n5 1111111110110000110111111111111111111111101100001101111111111111000000000000000000000000000000001111111100110000000000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\ngood 5 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 87, 194, 83, 28]\nfinding val for pos 6\n100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 256/256 [00:02&lt;00:00, 95.67it/s]\n6 0000000000111111111111111101110111111111111111111111111111111111000000000010111101000000000000000000000000101111010000000000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\ngood 6 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 82, 87, 194, 83, 28]\nfinding val for pos 7\n100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 256/256 [00:02&lt;00:00, 96.09it/s]\n7 1111111111000000000000000010001000000000000000000000000000000000111111111101000010111111111111111111111111010000101111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\ngood 7 [0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 49, 82, 87, 194, 83, 28]\nfinding val for pos 8\n100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 256/256 [00:02&lt;00:00, 94.04it/s]\n8 0010000000000000000000000100111100100000000000000000000001001111111111111111111111111111111111111111111110111011000000001100111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\ngood 8 [0, 0, 0, 0, 0, 0, 0, 0, 66, 49, 49, 82, 87, 194, 83, 28]\nfinding val for pos 9\n100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 256/256 [00:02&lt;00:00, 93.09it/s]\n9 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001000000000000000011111111111111111111111101000010111111111111111111111111010000101111111111\ngood 9 [0, 0, 0, 0, 0, 0, 0, 142, 66, 49, 49, 82, 87, 194, 83, 28]\nfinding val for pos 10\n100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 256/256 [00:02&lt;00:00, 91.87it/s]\n10 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110111111111111111111110111000011101111111111111111111101110000000000000000000000000000000000001100111111110001000100000000\ngood 10 [0, 0, 0, 0, 0, 0, 220, 142, 66, 49, 49, 82, 87, 194, 83, 28]\nfinding val for pos 11\n100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 256/256 [00:02&lt;00:00, 88.98it/s]\n11 0000000100000000000000001111100000000001000000000000000011111000111111110111011100000000111111001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\ngood 11 [0, 0, 0, 0, 0, 103, 220, 142, 66, 49, 49, 82, 87, 194, 83, 28]\nfinding val for pos 12\n100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 256/256 [00:02&lt;00:00, 88.90it/s]\n12 0000000000000000000000000000000000000000100010001111111100110000111011111111111111111111011100001110111111111111111111110111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\ngood 12 [0, 0, 0, 0, 3, 103, 220, 142, 66, 49, 49, 82, 87, 194, 83, 28]\nfinding val for pos 13\n100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 256/256 [00:02&lt;00:00, 87.27it/s]\n13 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000101111111100001100000000000000000000000000000000001111101111111111111111110000110111111011111111111111111100001101\ngood 13 [0, 0, 0, 165, 3, 103, 220, 142, 66, 49, 49, 82, 87, 194, 83, 28]\nfinding val for pos 14\n100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 256/256 [00:02&lt;00:00, 86.22it/s]\n14 1111111101111111111000001111111111111111011111111110000011111111000000000000000000000000000000000001000100000000110000001111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\ngood 14 [0, 0, 72, 165, 3, 103, 220, 142, 66, 49, 49, 82, 87, 194, 83, 28]\nfinding val for pos 15\n100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 256/256 [00:03&lt;00:00, 83.98it/s]\n15 1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000110011111111111101110111111111111111111111111111111111110000000010001111000100000000000000000000100011110001000000000000\ngood 15 [0, 179, 72, 165, 3, 103, 220, 142, 66, 49, 49, 82, 87, 194, 83, 28]\nfinding val for pos 16\n100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 256/256 [00:03&lt;00:00, 83.31it/s]\n16 0000000000000000000000000000000001000100000000000011000011111111111111111101111110110000111111111111111111011111101100001111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\ngood 16 [10, 179, 72, 165, 3, 103, 220, 142, 66, 49, 49, 82, 87, 194, 83, 28]\n{'is_iv_verified': True, 'is_pwd_verified': True, 'pwd_len': 9, 'pwd_error_number': 0, 'pwd_error_reason': 'Your password is correct!', 'is_sig_verified': True, 'sig_error_number': 0, 'sig_error_reason': 'verification is successful', 'flag': 'LINECTF{c576ff588b07a5770a5f7fab5a92a0c2}'}\nLINECTF{c576ff588b07a5770a5f7fab5a92a0c2}\n\nreal\t0m44.819s\nuser\t0m8.517s\nsys\t0m0.731s</code></pre></div>","frontmatter":{"date":"March 26, 2023","path":"/posts/2023-03-26-line-ctf-2023-malcheeeeese-writeup","title":"LINE CTF 2023 - Malcheeeeese","tags":"ctf,infosec,writeup,crypto"}}},"pageContext":{"prev":{"fileAbsolutePath":"/media/winarch-shared/code/portfolio/src/posts/2023-03-21-rtactf-2023-writeups/index.md","frontmatter":{"title":"RTACTF 2023 - Crypto","date":"2023-03-21T00:00:00.000Z","path":"/posts/2023-03-21-rtactf-2023-writeups"}},"next":{"fileAbsolutePath":"/media/winarch-shared/code/portfolio/src/posts/2023-04-30-angstromctf-2023-tau-as-a-service-writeup/index.md","frontmatter":{"title":"Ã¥ngstromCTF 2023 - tau as a service","date":"2023-04-30T00:00:00.000Z","path":"/posts/2023-04-30-angstromctf-2023-tau-as-a-service-writeup"}}}},
    "staticQueryHashes": ["4146750380"]}