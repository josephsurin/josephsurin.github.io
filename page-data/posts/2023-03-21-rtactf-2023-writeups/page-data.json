{
    "componentChunkName": "component---src-templates-md-blog-post-js",
    "path": "/posts/2023-03-21-rtactf-2023-writeups",
    "result": {"data":{"markdownRemark":{"html":"<p><a href=\"https://rtactf.ctfer.jp\">RTACTF</a> is a crypto/pwn speedrun CTF organised for fun by some Japanese CTFers. The challenges are really nice and relaxing to play through! I managed to solve all the crypto challenges within the target time :) Here are my solves for the problems.</p>\n<h1>XOR-CBC</h1>\n<blockquote>\n<p>目標：480 sec</p>\n<p>AES-CBC is secure right? Wait, do we really need the AES-part?</p>\n<p>AES-CBCって安全ですよね。これもうAESの部分は要らないのでは？</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> struct\n\nFLAG <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">\"FLAG\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RTACTF{*** REDACTED ***}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> FLAG<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">b\"RTACTF{\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> FLAG<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">b\"}\"</span><span class=\"token punctuation\">)</span>\n\nKEY_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">8</span>\nKEY <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span>KEY_SIZE<span class=\"token punctuation\">)</span>\n\np64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> struct<span class=\"token punctuation\">.</span>pack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;Q'</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\nu64 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> struct<span class=\"token punctuation\">.</span>unpack<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;Q'</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token triple-quoted-string string\">\"\"\"\nXOR-CBC Explained:\n\n     plain 0       plain 1       plain 2\n        |             |             |\n        v             v             v\nIV --> XOR  +------> XOR  +------> XOR\n        |   |         |   |         |\n        v   |         v   |         v\nkey -> XOR  | key -> XOR  | key -> XOR\n        |   |         |   |         |\n        +---+         +---+         |\n        |             |             |\n        v             v             v\n[IV] [cipher 0]    [cipher 1]    [cipher 2]\n\"\"\"</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    padlen <span class=\"token operator\">=</span> KEY_SIZE <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> KEY_SIZE<span class=\"token punctuation\">)</span>\n    plaintext <span class=\"token operator\">+=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>padlen<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> padlen<span class=\"token punctuation\">)</span>\n\n    iv <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span>KEY_SIZE<span class=\"token punctuation\">)</span>\n    ciphertext <span class=\"token operator\">=</span> iv\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> KEY_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        p_block <span class=\"token operator\">=</span> plaintext<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span>KEY_SIZE<span class=\"token punctuation\">]</span>\n        c_block <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>iv<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> u64<span class=\"token punctuation\">(</span>p_block<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> u64<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        ciphertext <span class=\"token operator\">+=</span> c_block\n        iv <span class=\"token operator\">=</span> c_block\n\n    <span class=\"token keyword\">return</span> ciphertext\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    iv<span class=\"token punctuation\">,</span> ciphertext <span class=\"token operator\">=</span> ciphertext<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>KEY_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ciphertext<span class=\"token punctuation\">[</span>KEY_SIZE<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n    plaintext <span class=\"token operator\">=</span> <span class=\"token string\">b''</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>ciphertext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> KEY_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        c_block <span class=\"token operator\">=</span> ciphertext<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span>KEY_SIZE<span class=\"token punctuation\">]</span>\n        p_block <span class=\"token operator\">=</span> p64<span class=\"token punctuation\">(</span>u64<span class=\"token punctuation\">(</span>iv<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> u64<span class=\"token punctuation\">(</span>c_block<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> u64<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        plaintext <span class=\"token operator\">+=</span> p_block\n        iv <span class=\"token operator\">=</span> c_block\n\n    <span class=\"token keyword\">return</span> plaintext<span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    ENC_FLAG <span class=\"token operator\">=</span> encrypt<span class=\"token punctuation\">(</span>FLAG<span class=\"token punctuation\">,</span> KEY<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Encrypted:\"</span><span class=\"token punctuation\">,</span> ENC_FLAG<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span> decrypt<span class=\"token punctuation\">(</span>ENC_FLAG<span class=\"token punctuation\">,</span> KEY<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> FLAG</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Encrypted: 6528337d61658047295cef0310f933eb681e424b524bcc294261bd471ca25bcd6f3217494b1ca7290c158d7369c168b3</code></pre></div>\n<h2>Solution</h2>\n<p>The diagram in the handout helps a lot to understand the simple block cipher mode of operation. We are also hinted to use known plaintext from the flag format through the assertion line. We can recover the first 7 bytes of the key by xoring the first block of ciphertext with the IV and the known plaintext. Then we can xor the key and the previous ciphertext block with a ciphertext block to recover that plaintext block. For the last key byte, I just guessed and checked what made sense.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> xor<span class=\"token punctuation\">,</span> u64<span class=\"token punctuation\">,</span> p64\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>Padding <span class=\"token keyword\">import</span> unpad\n\nenc <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>fromhex<span class=\"token punctuation\">(</span><span class=\"token string\">'6528337d61658047295cef0310f933eb681e424b524bcc294261bd471ca25bcd6f3217494b1ca7290c158d7369c168b3'</span><span class=\"token punctuation\">)</span>\niv <span class=\"token operator\">=</span> enc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\nblocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>enc<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>enc<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\nkey <span class=\"token operator\">=</span> xor<span class=\"token punctuation\">(</span>iv<span class=\"token punctuation\">,</span> blocks<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'RTACTF{1'</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># guess and check last byte</span>\nnext_iv <span class=\"token operator\">=</span> blocks<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\nflag <span class=\"token operator\">=</span> <span class=\"token string\">'RTACTF{1'</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> block <span class=\"token keyword\">in</span> blocks<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    dec <span class=\"token operator\">=</span> xor<span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> next_iv<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n    flag <span class=\"token operator\">+=</span> dec\n    <span class=\"token comment\"># print(dec)</span>\n    next_iv <span class=\"token operator\">=</span> block\n<span class=\"token comment\"># print(flag)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>unpad<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># RTACTF{1_b0ugh7_4_b1k3_y3s73rd4y}</span></code></pre></div>\n<h1>Collision-DES</h1>\n<blockquote>\n<p>目標：720 sec</p>\n<p>Is it possible to encrypt the same plaintext with completely different keys and get the same ciphertext?</p>\n<p>同じ平文をまったく異なる鍵で暗号化した結果が同じになることってあるんでしょうか。</p>\n<p><code>nc 35.194.118.87 7002</code></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> DES\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>Padding <span class=\"token keyword\">import</span> pad\n<span class=\"token keyword\">import</span> os\n\nFLAG <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">\"FLAG\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RTACTF{**** REDACTED ****}\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> plaintext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cipher <span class=\"token operator\">=</span> DES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> DES<span class=\"token punctuation\">.</span>MODE_ECB<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> cipher<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span>pad<span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    key1 <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Key 1: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>key1<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    key2 <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>fromhex<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Key 2: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>key2<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Invalid key size :(\"</span>\n    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>intersection<span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>key2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Keys look similar :(\"</span>\n\n    plaintext <span class=\"token operator\">=</span> <span class=\"token string\">b\"The quick brown fox jumps over the lazy dog.\"</span>\n    <span class=\"token keyword\">if</span> encrypt<span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> plaintext<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> encrypt<span class=\"token punctuation\">(</span>key2<span class=\"token punctuation\">,</span> plaintext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[+] You found a collision!\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>FLAG<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[-] Nope.\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Solution</h2>\n<p>In this challenge, we are given a DES key and need to provide a different DES key which encrypts the same plaintext to the same ciphertext as the given key. Solving this challenge pretty much requires knowing that some bits (the 8th bit of each byte) of the DES key are parity bits and don't actually affect the encryption result, so we can just flip those bits which will give a different key but still encrypt the message to the same ciphertext.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\nconn <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'35.194.118.87'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7002</span><span class=\"token punctuation\">)</span>\nkey1 <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>fromhex<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'1: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nans <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>k <span class=\"token operator\">^</span> <span class=\"token number\">1</span> <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> key1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nconn<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'Key 2: '</span><span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># RTACTF{The_keysize_of_DES_is_actually_56-bit}</span></code></pre></div>\n<h1>Reused-AES</h1>\n<blockquote>\n<p>目標：1080 sec</p>\n<p>I re-use the key and IV to reduce waste.</p>\n<p>もったいないので鍵とIVは再利用しています。</p>\n<p><code>nc 35.194.118.87 7001</code></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>Padding <span class=\"token keyword\">import</span> pad\n<span class=\"token keyword\">import</span> os\n\niv <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\nkey <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\nFLAG <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">\"FLAG\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RTACTF{**** REDACTED ****}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cipher <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> AES<span class=\"token punctuation\">.</span>MODE_CFB<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> cipher<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span>pad<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>encrypt<span class=\"token punctuation\">(</span>FLAG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>encrypt<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"> \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Solution</h2>\n<p>This challenge is about <a href=\"https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_feedback_(CFB)\">CFB</a>. The wikipedia page confused me a bit as I was looking at the diagram for full-block CFB, but pycryptodome is CFB-8 by default (i.e. the segment size is 8 bits). What that means is the key stream is only used to encrypt a single byte at a time. The flag is the same across connections, so we can make one connection per flag character to recover it given that we know the previous characters in the flag.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> string <span class=\"token keyword\">import</span> printable\n\n<span class=\"token triple-quoted-string string\">\"\"\"\nC0 = E(IV) ^ M0\nC0' = E(IV) ^ M0'\n\nso\n\nC0' ^ C0 = M0 ^ M0'\n=> M0 = C0' ^ C0 ^ M0'\n\nCFB-8, so one byte is encrypted at a time\nto get the next 16byte block of keystream, \nthe ciphertext for that one byte is appended to the previous 15 bytes of the ct (or iv)\n\"\"\"</span>\n\nflag <span class=\"token operator\">=</span> <span class=\"token string\">'RTACTF'</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    conn <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'35.194.118.87'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7001</span><span class=\"token punctuation\">)</span>\n    ct <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>fromhex<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    conn<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'> '</span><span class=\"token punctuation\">,</span> flag <span class=\"token operator\">+</span> <span class=\"token string\">b'X'</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>ct<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    ct0 <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>fromhex<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    conn<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ct<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ct0<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    next_m <span class=\"token operator\">=</span> ct<span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> ct0<span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'X'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'next flag char:'</span><span class=\"token punctuation\">,</span> next_m<span class=\"token punctuation\">)</span>\n    flag <span class=\"token operator\">+=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>next_m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flag:'</span><span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># RTACTF{name_it_AES-SDGs}</span></code></pre></div>\n<h1>1R-AES</h1>\n<blockquote>\n<p>目標：1320 sec</p>\n<p>Why does AES repeat the same operation 10 times? Why not once?</p>\n<p>AESってなんで中で同じ処理10回も繰り返すんですか？1回で良くないすか？</p>\n<p><code>nc 35.194.118.87 7003</code></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> aes\n<span class=\"token keyword\">import</span> os\n\nkey <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">\"KEY\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*** REDACTED ***\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">16</span>\n\nflag <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">\"FLAG\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RTACTF{*** REDACTED ***}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> flag<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"RTACTF{\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> flag<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"}\"</span><span class=\"token punctuation\">)</span>\nla <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RTACTF{\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>la<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">16</span>\n\ncipher <span class=\"token operator\">=</span> aes<span class=\"token punctuation\">.</span>AES<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enc(la):\"</span><span class=\"token punctuation\">,</span> cipher<span class=\"token punctuation\">.</span>encrypt_block<span class=\"token punctuation\">(</span>la<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    cipher <span class=\"token operator\">=</span> aes<span class=\"token punctuation\">.</span>AES<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n    plaintext <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>fromhex<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg > \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">16</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enc(msg):\"</span><span class=\"token punctuation\">,</span> cipher<span class=\"token punctuation\">.</span>encrypt_block<span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code>aes.py</code> is the implementation of AES <a href=\"https://raw.githubusercontent.com/boppreh/aes/master/aes.py\">here</a>, except modified so that only one round is used:</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token coord\">181c181</span>\n<span class=\"token deleted-arrow deleted\"><span class=\"token prefix deleted\"><</span>     rounds_by_key_size = {16: 10, 24: 12, 32: 14}\n</span><span class=\"token coord\">---</span>\n<span class=\"token inserted-arrow inserted\"><span class=\"token prefix inserted\">></span>     rounds_by_key_size = {16: 1, 24: 1, 32: 1}</span></code></pre></div>\n<h2>Solution</h2>\n<p>This is just one round AES. Modelling it in Z3 is enough to recover the two round keys with just three known plaintext/ciphertext pairs.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> os <span class=\"token keyword\">import</span> urandom\n<span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> z3 <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> tqdm <span class=\"token keyword\">import</span> tqdm\n\n<span class=\"token keyword\">from</span> aes <span class=\"token keyword\">import</span> s_box<span class=\"token punctuation\">,</span> shift_rows<span class=\"token punctuation\">,</span> add_round_key<span class=\"token punctuation\">,</span> inv_shift_rows<span class=\"token punctuation\">,</span> inv_sub_bytes\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">bytes2matrix</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">matrix2bytes</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">sub_bytes</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> z3_SBOX<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">z3_encrypt</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> key0<span class=\"token punctuation\">,</span> key1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    add_round_key<span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> key0<span class=\"token punctuation\">)</span>\n    sub_bytes<span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">)</span>\n    shift_rows<span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">)</span>\n    add_round_key<span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> key1<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> key0<span class=\"token punctuation\">,</span> key1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    add_round_key<span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> key1<span class=\"token punctuation\">)</span>\n    inv_shift_rows<span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">)</span>\n    inv_sub_bytes<span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">)</span>\n    add_round_key<span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> key0<span class=\"token punctuation\">)</span>\n\nconn <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'35.194.118.87'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7003</span><span class=\"token punctuation\">)</span>\nla <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>fromhex<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">': '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nsolver <span class=\"token operator\">=</span> Solver<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nz3_SBOX <span class=\"token operator\">=</span> Function<span class=\"token punctuation\">(</span><span class=\"token string\">'z3_SBOX'</span><span class=\"token punctuation\">,</span> BitVecSort<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> BitVecSort<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s_box<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    solver<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>z3_SBOX<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s_box<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nptct_pairs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nmsgs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> msg <span class=\"token keyword\">in</span> msgs<span class=\"token punctuation\">:</span>\n    conn<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span><span class=\"token string\">b'> '</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    ct <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>fromhex<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">': '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    ptct_pairs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> ct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nKEY0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>BitVec<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'rk0_</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\nKEY1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>BitVec<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'rk1_</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'collecting ptct pairs...'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> pt<span class=\"token punctuation\">,</span> ct <span class=\"token keyword\">in</span> tqdm<span class=\"token punctuation\">(</span>ptct_pairs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    pt_mat <span class=\"token operator\">=</span> bytes2matrix<span class=\"token punctuation\">(</span>pt<span class=\"token punctuation\">)</span>\n    z3_encrypt<span class=\"token punctuation\">(</span>pt_mat<span class=\"token punctuation\">,</span> bytes2matrix<span class=\"token punctuation\">(</span>KEY0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bytes2matrix<span class=\"token punctuation\">(</span>KEY1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    z3_ct <span class=\"token operator\">=</span> pt_mat\n    <span class=\"token keyword\">for</span> a<span class=\"token punctuation\">,</span> b <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>matrix2bytes<span class=\"token punctuation\">(</span>z3_ct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        solver<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'solving...'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>solver<span class=\"token punctuation\">.</span>check<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nm <span class=\"token operator\">=</span> solver<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nkey0 <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>as_long<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> KEY0<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nkey1 <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>as_long<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> KEY1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nla <span class=\"token operator\">=</span> bytes2matrix<span class=\"token punctuation\">(</span>la<span class=\"token punctuation\">)</span>\ndecrypt<span class=\"token punctuation\">(</span>la<span class=\"token punctuation\">,</span> bytes2matrix<span class=\"token punctuation\">(</span>key0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> bytes2matrix<span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nla <span class=\"token operator\">=</span> matrix2bytes<span class=\"token punctuation\">(</span>la<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'RTACTF{'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>la<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># RTACTF{MixColumnIsMust!}</span></code></pre></div>","frontmatter":{"date":"March 21, 2023","path":"/posts/2023-03-21-rtactf-2023-writeups","title":"RTACTF 2023 - Crypto","tags":"ctf,infosec,writeup,crypto"}}},"pageContext":{"prev":{"fileAbsolutePath":"/home/joseph/stuff/code/portfolio/src/posts/2022-12-31-asis-ctf-finals-2022-rhyton-writeup/index.md","frontmatter":{"title":"ASIS CTF Finals 2022 - Rhyton","date":"2022-12-31T00:00:00.000Z","path":"/posts/2022-12-31-asis-ctf-finals-2022-rhyton-writeup"}},"next":{"fileAbsolutePath":"/home/joseph/stuff/code/portfolio/src/posts/2023-03-26-line-ctf-2023-malcheeeeese-writeup/index.md","frontmatter":{"title":"LINE CTF 2023 - Malcheeeeese","date":"2023-03-26T00:00:00.000Z","path":"/posts/2023-03-26-line-ctf-2023-malcheeeeese-writeup"}}}},
    "staticQueryHashes": ["4146750380"]}