{
    "componentChunkName": "component---src-templates-md-blog-post-js",
    "path": "/post/2020-03-13-utctf-2020-writeups",
    "result": {"data":{"markdownRemark":{"html":"<h1>Random ECB</h1>\n<h2>Crypto</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python</span>\n\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>Padding <span class=\"token keyword\">import</span> pad\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Random <span class=\"token keyword\">import</span> get_random_bytes\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Random<span class=\"token punctuation\">.</span>random <span class=\"token keyword\">import</span> getrandbits\n<span class=\"token keyword\">from</span> secret <span class=\"token keyword\">import</span> flag\n\nKEY <span class=\"token operator\">=</span> get_random_bytes<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">aes_ecb_encrypt</span><span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cipher <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> AES<span class=\"token punctuation\">.</span>MODE_ECB<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> cipher<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">encryption_oracle</span><span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    b <span class=\"token operator\">=</span> getrandbits<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    plaintext <span class=\"token operator\">=</span> pad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">b'A'</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> plaintext <span class=\"token operator\">+</span> flag<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> aes_ecb_encrypt<span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">,</span> KEY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input a string to encrypt (input 'q' to quit):\"</span><span class=\"token punctuation\">)</span>\n        user_input <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> user_input <span class=\"token operator\">==</span> <span class=\"token string\">'q'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n        output <span class=\"token operator\">=</span> encryption_oracle<span class=\"token punctuation\">(</span>user_input<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Here is your encrypted string, have a nice day :)\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Solution</h2>\n<p>The service is an ECB encryption oracle that randomly prefixes the plaintext with an <code>'A'</code> with a probability of ~1/2. To exploit it, we use a slightly modified version of the <a href=\"https://github.com/ashutosh1206/Crypton/tree/master/Block-Cipher/Attack-ECB-Byte-at-a-Time\">ECB byte at a time attack</a>.</p>\n<p>We see that for any input <code>I</code> we provide to the oracle, we will get the encryption of either <code>I+flag</code> or <code>'A'+I+flag</code>. So in order to get a crib for each byte, we first begin by seeing what the encryption of a full block of <code>'A'</code>s looks like. Then, we query with input <code>(15+15)*'A'</code> until the second block of output is different to the full block of <code>'A'</code>s. This block is the encryption of <code>15*'A'+flag[0]</code>. We can use this to bruteforce the first character of the flag. We continue in a similar manner, keeping a list of our seen cribs and sending <code>(16+15-len(flag))*'A'</code> each time until we get some encryption whose second block differs from anything in the list of seen cribs. Eventually, we will recover the full flag!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> remote\n<span class=\"token keyword\">from</span> string <span class=\"token keyword\">import</span> printable\n\nconn <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'crypto.utctf.live'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9005</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">blockify</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">oracle_enc</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    conn<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    conn<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n    conn<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> blockify<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nflag <span class=\"token operator\">=</span> <span class=\"token string\">b'utflag{'</span>\n\nseen_cribs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>oracle_enc<span class=\"token punctuation\">(</span><span class=\"token string\">b'A'</span><span class=\"token operator\">*</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\nsearching_for_crib <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\nj <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">while</span> flag<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'}'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> searching_for_crib<span class=\"token punctuation\">:</span>\n        b <span class=\"token operator\">=</span> oracle_enc<span class=\"token punctuation\">(</span><span class=\"token string\">b'A'</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token operator\">+</span><span class=\"token number\">15</span><span class=\"token operator\">-</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> seen_cribs<span class=\"token punctuation\">:</span>\n            seen_cribs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            searching_for_crib <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        crib <span class=\"token operator\">=</span> seen_cribs<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        seen_blocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        kouho <span class=\"token operator\">=</span> flag <span class=\"token operator\">+</span> printable<span class=\"token punctuation\">[</span>j<span class=\"token operator\">%</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>printable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>seen_blocks<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            b <span class=\"token operator\">=</span> oracle_enc<span class=\"token punctuation\">(</span><span class=\"token string\">b'A'</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token operator\">+</span><span class=\"token number\">15</span><span class=\"token operator\">-</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>kouho<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>kouho<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> crib<span class=\"token punctuation\">:</span>\n                flag <span class=\"token operator\">=</span> kouho\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n                searching_for_crib <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n                <span class=\"token keyword\">break</span>\n            <span class=\"token keyword\">elif</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> seen_blocks<span class=\"token punctuation\">:</span>\n                seen_blocks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        j <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></code></pre></div>\n<p>Output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">utflag{3\nutflag{3c\nutflag{3cb\nutflag{3cb_\nutflag{3cb_w\nutflag{3cb_w1\nutflag{3cb_w17\nutflag{3cb_w17h\nutflag{3cb_w17h_\nutflag{3cb_w17h_r\nutflag{3cb_w17h_r4\nutflag{3cb_w17h_r4n\nutflag{3cb_w17h_r4nd\nutflag{3cb_w17h_r4nd0\nutflag{3cb_w17h_r4nd0m\nutflag{3cb_w17h_r4nd0m_\nutflag{3cb_w17h_r4nd0m_3\nutflag{3cb_w17h_r4nd0m_3c\nutflag{3cb_w17h_r4nd0m_3cb\nutflag{3cb_w17h_r4nd0m_3cb}</code></pre></div>","frontmatter":{"date":"March 13, 2020","path":"/post/2020-03-13-utctf-2020-writeups","title":"UTCTF 2020 Writeups","tags":"ctf,infosec,crypto"}}},"pageContext":{"prev":{"fileAbsolutePath":"/media/winarch-shared/code/portfolio/src/posts/2020-02-19-tshark-cheatsheet/index.md","frontmatter":{"title":"tshark Cheatsheet","date":"2020-02-19T00:00:00.000Z","path":"/post/2020-02-19-tshark-cheatsheet"}},"next":{"fileAbsolutePath":"/media/winarch-shared/code/portfolio/src/posts/2020-03-19-angstromctf-2020-writeups/index.md","frontmatter":{"title":"ångstromCTF 2020 Writeups","date":"2020-03-19T00:00:00.000Z","path":"/posts/2020-03-19-angstromctf-2020-writeups"}}}},
    "staticQueryHashes": ["63159454"]}